{"ast":null,"code":"import { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/auth\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common/http\";\nexport class User {\n  constructor(status) {\n    this.status = status;\n  }\n\n}\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(afAuth, router, httpClient) {\n      this.afAuth = afAuth;\n      this.router = router;\n      this.httpClient = httpClient;\n    } // Provide username and password for authentication, and once authentication is successful,\n    //store JWT token in session\n\n\n    authenticate(username, password) {\n      return this.httpClient.post(\"http://localhost:8087/authenticate\", {\n        username,\n        password\n      }).pipe(map(userData => {\n        sessionStorage.setItem(\"username\", username);\n        let tokenStr = \"Bearer \" + userData.token;\n        sessionStorage.setItem(\"token\", tokenStr);\n        return userData;\n      }));\n    }\n\n    GoogleAuth() {\n      return this.AuthLogin(new GoogleAuthProvider());\n    } // Auth logic to run auth providers\n\n\n    AuthLogin(provider) {\n      return this.afAuth.signInWithPopup(provider).then(result => {\n        this.router.navigate(['']);\n        this.isLoginFailed = false;\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n\n    isUserLoggedIn() {\n      let user = sessionStorage.getItem(\"username\");\n      console.log(!(user === null));\n      return !(user === null);\n    }\n\n    logOut() {\n      sessionStorage.removeItem(\"username\");\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.ActivatedRoute), i0.ɵɵinject(i3.HttpClient));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: \"root\"\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}